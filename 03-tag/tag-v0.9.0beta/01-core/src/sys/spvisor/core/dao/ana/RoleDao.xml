<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sys.spvisor.core.dao.ana.RoleDao">
	
	<resultMap type="Role" id="resultMapRole">
		<id column="role_id" property="id" />
        <result column="role_name" property="name" />
        <result column="role_desc" property="desc" />
        <result column="status" property="status" />
        <result column="status_name" property="statusName" />
        <result column="module_code" property="moduleCode" />
        <result column="level" property="level" />
        <result column="parent_id" property="parentID" />
        <result column="create_datetime" property="createDatetime" />
        <result column="update_datetime" property="updateDatetime" />
        <result column="check_status"	 property="checkStatus"/>
	</resultMap>
	
	<select id="getRolesByModuleCode" parameterType="String" resultMap="resultMapRole">
		select role_id, role_name, role_desc, status, module_code, create_datetime, update_datetime
			from t_role
  			where module_code=#{moduleCode} and status='O' and check_status='O' and level = 1
          	order by role_id
	</select>
	
	<insert id="insert" parameterType="Role" keyProperty="id" useGeneratedKeys="true">
    		insert into t_role
    			( role_name, status, role_desc,module_code, create_datetime, update_datetime, check_status, level)
    		values
    			( #{name}, 'O', #{desc}, 'CONSOLE', current_timestamp, current_timestamp, 'O', 1)
   </insert>
    
   <update id="update" parameterType="Role">
    	update t_role set role_name = #{name}, 
    	status = #{status, jdbcType=VARCHAR}, 
    	role_desc = #{desc, jdbcType=VARCHAR}, 
    	update_datetime=current_timestamp,
    	check_status=#{checkStatus}
    	where role_id = #{id}
   </update>
    
    <delete id="deleteAllRoleMenu">
    	delete from t_role_menu where role_id = #{roleId}
    </delete>
    
    <delete id="deleteAllRolePermission">
    	delete from t_role_permission where role_id = #{roleId}
    </delete>
    
    <insert id="insertRoleMenu">
    	insert into t_role_menu ( role_id, menu_id)
    	values ( #{roleId}, #{menuId})
    </insert>
    
    <insert id="insertRolePermission">
    	insert into t_role_permission ( role_id, permission_id)
    	values ( #{roleId}, #{permissionId})
    </insert>
    
	<select id="getRolesByUserId" parameterType="long" resultMap="resultMapRole">
		select r.role_id, r.role_name, r.role_desc, r.status, r.module_code, r.create_datetime, r.update_datetime
			from t_role r, t_user_role ur
  			where r.role_id=ur.role_id and ur.user_id=#{userId} and r.status='O' and r.check_status='O'
          	order by r.role_id
	</select>
	
	<select id="query" parameterType="RoleCriteria" resultMap="resultMapRole">
    	select r.role_id, r.role_name, r.status, r.role_desc, r.module_code, r.create_datetime, r.update_datetime, r.level, r.parent_id, r.check_status
			from t_role r
			<include refid="queryWhere"></include>	
		    order by r.role_id
		    <if test="paging == true">
		    	limit #{limit} offset #{offset}
		    </if>
    </select>
    
    <select id="queryCount" parameterType="RoleCriteria" resultType="int">
    	select count(*) from t_role r 
		<include refid="queryWhere"></include>
    </select>
    
    <select id="getById" parameterType="Long" resultMap="resultMapRole">
		select r.role_id, r.role_name, r.role_desc, r.status, r.module_code, r.create_datetime, r.update_datetime, r.check_status, r.check_status
			from t_role r where r.role_id= #{id} and r.check_status='O'
	</select>
	
	<sql id="queryWhere">
		<where>
			<choose>
		        <when test="roleId != null">  
		            and r.role_id = #{roleId}  
		        </when>  
		        <when test="roleName != null">  
		            and r.role_desc like  #{roleName}||'%'
		        </when>   
		    </choose>
		     and r.check_status = 'O' and r.level = 1
		</where>
	</sql>
    
	
</mapper>