<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sys.spvisor.core.dao.work.TProductTypeMappingMapper" >
  <resultMap id="BaseResultMap" type="sys.spvisor.core.entity.work.TProductTypeMapping" >
    <id column="type_mapping_id" property="typeMappingId" jdbcType="INTEGER" />
    <result column="big_type_id" property="bigTypeId" jdbcType="INTEGER" />
    <result column="big_type_name" property="bigTypeName" jdbcType="VARCHAR" />
    <result column="small_type_id" property="smallTypeId" jdbcType="INTEGER" />
    <result column="small_type_name" property="smallTypeName" jdbcType="VARCHAR" />
    <result column="three_level_name" property="threeLevelName" jdbcType="VARCHAR" />
    <result column="three_level_id" property="threeLevelId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap type="sys.spvisor.core.result.work.TypeResult" id="ResultMap">
  	 <result column="big_type_name" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap type="sys.spvisor.core.result.work.TypeResult" id="ResultTwoMap">
   	<result column="small_type_name" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap type="sys.spvisor.core.result.work.TypeIdResult" id="ResultIdOneMap">
  	<result column="big_type_id" property="id" jdbcType="INTEGER" />
  	<result column="big_type_name" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap type="sys.spvisor.core.result.work.TypeIdResult" id="ResultIdTwoMap">
  	<result column="small_type_id" property="id" jdbcType="INTEGER" />
  	<result column="small_type_name" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap type="sys.spvisor.core.result.work.TypeIdResult" id="ResultIdThreeMap">
  	<result column="three_level_id" property="id" jdbcType="INTEGER" />
  	<result column="three_level_name" property="type" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    type_mapping_id, big_type_id, big_type_name, small_type_id, small_type_name, three_level_name, 
    three_level_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="sys.spvisor.core.entity.work.TProductTypeMappingExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_product_type_mapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_product_type_mapping
    where type_mapping_id = #{typeMappingId,jdbcType=INTEGER}
  </select>
  
  
  <select id="getLevelOneName" resultMap="ResultMap">
  	select big_type_name from t_product_type_mapping group by big_type_name
  </select>
  
  <select id="getLevelTwoName" resultMap="ResultTwoMap" parameterType="java.lang.String">
  	select small_type_name from t_product_type_mapping where big_type_name=#{bigTypeName} group by small_type_name 
  </select>
  
  <select id="getLevelOneId"  resultMap="ResultIdOneMap" parameterType="java.lang.String">
  	select big_type_name,big_type_id  from t_product_type_mapping 
  	<where>
  		<if test="bigTypeName!='' and bigTypeName!= null">
  			big_type_name=#{bigTypeName}
  		</if>
  	</where>
  	group by big_type_name,big_type_id order by big_type_id
  </select>
  <select id="getLevelTwoId"  resultMap="ResultIdTwoMap" parameterType="java.lang.String">
  	select small_type_name,small_type_id from t_product_type_mapping where big_type_name=#{bigTypeName} group by small_type_name,small_type_id  order by small_type_id
  </select>
  
  <select id="getLevelThreeId" resultMap="ResultIdThreeMap" parameterType="sys.spvisor.core.result.work.CriteriaType">
  		select three_level_name,three_level_id from t_product_type_mapping
  		 <where>
  			<if test="bigTypeName!='' and bigTypeName!= null">
  				and big_type_name=#{bigTypeName}
  			</if>
  			<if test="smallTypeName!='' and smallTypeName!= null">
  				and small_type_name=#{smallTypeName}
  			</if>
  		</where>
  		group by three_level_name,three_level_id order by three_level_id
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_product_type_mapping
    where type_mapping_id = #{typeMappingId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="sys.spvisor.core.entity.work.TProductTypeMappingExample" >
    delete from t_product_type_mapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="sys.spvisor.core.entity.work.TProductTypeMapping" useGeneratedKeys="true" keyProperty="typeMappingId">
    insert into t_product_type_mapping ( big_type_id, big_type_name, 
      small_type_id, small_type_name, three_level_name, 
      three_level_id)
    values (#{bigTypeId,jdbcType=INTEGER}, #{bigTypeName,jdbcType=VARCHAR}, 
      #{smallTypeId,jdbcType=INTEGER}, #{smallTypeName,jdbcType=VARCHAR}, #{threeLevelName,jdbcType=VARCHAR}, 
      #{threeLevelId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="sys.spvisor.core.entity.work.TProductTypeMapping" >
    insert into t_product_type_mapping
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="typeMappingId != null" >
        type_mapping_id,
      </if>
      <if test="bigTypeId != null" >
        big_type_id,
      </if>
      <if test="bigTypeName != null" >
        big_type_name,
      </if>
      <if test="smallTypeId != null" >
        small_type_id,
      </if>
      <if test="smallTypeName != null" >
        small_type_name,
      </if>
      <if test="threeLevelName != null" >
        three_level_name,
      </if>
      <if test="threeLevelId != null" >
        three_level_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="typeMappingId != null" >
        #{typeMappingId,jdbcType=INTEGER},
      </if>
      <if test="bigTypeId != null" >
        #{bigTypeId,jdbcType=INTEGER},
      </if>
      <if test="bigTypeName != null" >
        #{bigTypeName,jdbcType=VARCHAR},
      </if>
      <if test="smallTypeId != null" >
        #{smallTypeId,jdbcType=INTEGER},
      </if>
      <if test="smallTypeName != null" >
        #{smallTypeName,jdbcType=VARCHAR},
      </if>
      <if test="threeLevelName != null" >
        #{threeLevelName,jdbcType=VARCHAR},
      </if>
      <if test="threeLevelId != null" >
        #{threeLevelId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="sys.spvisor.core.entity.work.TProductTypeMappingExample" resultType="java.lang.Integer" >
    select count(*) from t_product_type_mapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExampleSelective" parameterType="map" >
    update t_product_type_mapping
    <set >
      <if test="record.typeMappingId != null" >
        type_mapping_id = #{record.typeMappingId,jdbcType=INTEGER},
      </if>
      <if test="record.bigTypeId != null" >
        big_type_id = #{record.bigTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.bigTypeName != null" >
        big_type_name = #{record.bigTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.smallTypeId != null" >
        small_type_id = #{record.smallTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.smallTypeName != null" >
        small_type_name = #{record.smallTypeName,jdbcType=VARCHAR},
      </if>
      <if test="record.threeLevelName != null" >
        three_level_name = #{record.threeLevelName,jdbcType=VARCHAR},
      </if>
      <if test="record.threeLevelId != null" >
        three_level_id = #{record.threeLevelId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_product_type_mapping
    set type_mapping_id = #{record.typeMappingId,jdbcType=INTEGER},
      big_type_id = #{record.bigTypeId,jdbcType=INTEGER},
      big_type_name = #{record.bigTypeName,jdbcType=VARCHAR},
      small_type_id = #{record.smallTypeId,jdbcType=INTEGER},
      small_type_name = #{record.smallTypeName,jdbcType=VARCHAR},
      three_level_name = #{record.threeLevelName,jdbcType=VARCHAR},
      three_level_id = #{record.threeLevelId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="sys.spvisor.core.entity.work.TProductTypeMapping" >
    update t_product_type_mapping
    <set >
      <if test="bigTypeId != null" >
        big_type_id = #{bigTypeId,jdbcType=INTEGER},
      </if>
      <if test="bigTypeName != null" >
        big_type_name = #{bigTypeName,jdbcType=VARCHAR},
      </if>
      <if test="smallTypeId != null" >
        small_type_id = #{smallTypeId,jdbcType=INTEGER},
      </if>
      <if test="smallTypeName != null" >
        small_type_name = #{smallTypeName,jdbcType=VARCHAR},
      </if>
      <if test="threeLevelName != null" >
        three_level_name = #{threeLevelName,jdbcType=VARCHAR},
      </if>
      <if test="threeLevelId != null" >
        three_level_id = #{threeLevelId,jdbcType=INTEGER},
      </if>
    </set>
    where type_mapping_id = #{typeMappingId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="sys.spvisor.core.entity.work.TProductTypeMapping" >
    update t_product_type_mapping
    set big_type_id = #{bigTypeId,jdbcType=INTEGER},
      big_type_name = #{bigTypeName,jdbcType=VARCHAR},
      small_type_id = #{smallTypeId,jdbcType=INTEGER},
      small_type_name = #{smallTypeName,jdbcType=VARCHAR},
      three_level_name = #{threeLevelName,jdbcType=VARCHAR},
      three_level_id = #{threeLevelId,jdbcType=INTEGER}
    where type_mapping_id = #{typeMappingId,jdbcType=INTEGER}
  </update>
</mapper>